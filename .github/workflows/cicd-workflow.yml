# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

run-name: "Run #${{ github.run_number }} on ${{github.ref_name}} by @${{ github.actor }}"

env:
  PYTHON_VERSION: 3.11
  GEM_HOME: "${{github.workspace}}/.gem" 
  SKIP_UNIT_TESTS: ${{inputs.SKIP_TESTS || 'false'}}
  PACKER_GIT_BRANCH: ${{inputs.PACKER_GIT_BRANCH || 'master'}}
  PACKER_GIT_TAG: ${{inputs.PACKER_GIT_TAG || ''}}
  PYTEST_ADDOPTS: ${{inputs.PYTEST_ADDOPTS || ''}}
  PACKER_ZONE: ${{inputs.PACKER_ZONE || 'zone-1'}}
  BUILD_AMI: ${{inputs.BUILD_AMI || 'true'}}
  SYSTEM: ${{ inputs.SYSTEM || 'dev' }}

on:
  push:
    branches:
      - 'main'
  pull_request:
    types: 
      - opened
      - reopened
      - synchronize
      # Run the pipline also when the changes in draft mode are done
      # and we are ready to get more feedback
      # It takes a couple of seconds for the new run to be triggered. 
      - ready_for_review
  
  workflow_dispatch:
    inputs:
      SYSTEM:
        description: 'Select environment to build'
        type: choice
        required: true
        default: "staging"
        options: 
        - 'backend'
        - 'staging'
        - 'production'
      SKIP_TESTS:
        description: 'Skip unit tests'
        type: boolean
        required: true
        default: false
      PACKER_GIT_BRANCH:
        description: 'Name of Github branch to use'
        required: true
        default: 'master'
      PACKER_GIT_TAG:
        description: 'To use a Git commit tag, enter the tag name here'
        required: false
        default: ''
      PYTEST_ADDOPTS:
        description: 'Pytest options set. "-x" is fail fast'
        type: choice
        required: false
        default: ""
        options: 
          - ''
          - '-x'
      BUILD_AMI:
        description: 'Should we build an AMI?'
        type: boolean
        required: true
        default: true
      PACKER_ZONE:
        description: 'If BUILD_AMI is checked, select which availability zone for Packer build'
        type: choice
        required: true
        default: 'zone-1'
        options: 
          - 'zone-1'
          - 'zone-2'
          - 'zone-3'

permissions:
  contents: read

jobs:
  build:
    if: >-
      (!inputs.BUILD_AMI) &&
      (
        github.event.action == 'opened' ||
        github.event.action == 'reopened' ||
        !github.event.pull_request.draft
      )
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      - name: Checkout repo 2
        uses: actions/checkout@v4
        with:
          repository: JRafiei/presentaion
          path: presentaion

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
            ${{env.PYTHON_VERSION}} 

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install flake8
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics > output.log

      - name: Work in main repo
        env:
          ENV: >-
            ${{ fromJson('{
              "dev": "dev",
              "staging": "stg",
              "production": "prd"
            }')[env.SYSTEM] }}
          FOV: 'fov'
        working-directory: ./main
        run: |
          pwd
          echo "==== INFO ===="
          ls 
          echo "=============="

      - name: Work in presentation repo
        working-directory: ./presentaion
        run: |
          pwd
          echo "==== INFO ===="
          ls 
          echo "=============="


      - name: Last job
        run: |
          pwd
          echo "==== INFO ===="
          ls 
          echo "=============="

      # - name: Upload output file
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: output-log-file
      #     path: output.log
